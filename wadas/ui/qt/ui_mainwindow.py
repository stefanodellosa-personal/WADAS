# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'mainwindow.ui'
##
## Created by: Qt User Interface Compiler version 6.8.0
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QApplication, QFrame, QGridLayout, QLabel,
    QListWidget, QListWidgetItem, QMainWindow, QMenu,
    QMenuBar, QPlainTextEdit, QSizePolicy, QStatusBar,
    QToolBar, QVBoxLayout, QWidget)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(1150, 810)
        sizePolicy = QSizePolicy(QSizePolicy.Policy.MinimumExpanding, QSizePolicy.Policy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QSize(800, 600))
        self.actionSelect_Mode = QAction(MainWindow)
        self.actionSelect_Mode.setObjectName(u"actionSelect_Mode")
        icon = QIcon(QIcon.fromTheme(u"camera-web"))
        self.actionSelect_Mode.setIcon(icon)
        self.actionSelect_Mode.setMenuRole(QAction.MenuRole.NoRole)
        self.actionRun = QAction(MainWindow)
        self.actionRun.setObjectName(u"actionRun")
        icon1 = QIcon(QIcon.fromTheme(QIcon.ThemeIcon.MediaPlaybackStart))
        self.actionRun.setIcon(icon1)
        self.actionRun.setMenuRole(QAction.MenuRole.NoRole)
        self.actionStop = QAction(MainWindow)
        self.actionStop.setObjectName(u"actionStop")
        icon2 = QIcon(QIcon.fromTheme(u"media-playback-stop"))
        self.actionStop.setIcon(icon2)
        self.actionStop.setMenuRole(QAction.MenuRole.NoRole)
        self.actionActionConfigureEmail = QAction(MainWindow)
        self.actionActionConfigureEmail.setObjectName(u"actionActionConfigureEmail")
        icon3 = QIcon(QIcon.fromTheme(u"emblem-mail"))
        self.actionActionConfigureEmail.setIcon(icon3)
        self.actionActionConfigureEmail.setMenuRole(QAction.MenuRole.NoRole)
        self.actionSelectLocalCameras = QAction(MainWindow)
        self.actionSelectLocalCameras.setObjectName(u"actionSelectLocalCameras")
        icon4 = QIcon(QIcon.fromTheme(u"camera-video"))
        self.actionSelectLocalCameras.setIcon(icon4)
        self.actionSelectLocalCameras.setMenuRole(QAction.MenuRole.NoRole)
        self.actionConfigure_Ai_model = QAction(MainWindow)
        self.actionConfigure_Ai_model.setObjectName(u"actionConfigure_Ai_model")
        icon5 = QIcon()
        icon5.addFile(u"wadas/icons/icon-ai-24.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.actionConfigure_Ai_model.setIcon(icon5)
        self.actionConfigure_Ai_model.setMenuRole(QAction.MenuRole.NoRole)
        self.actionOpen_configuration_file = QAction(MainWindow)
        self.actionOpen_configuration_file.setObjectName(u"actionOpen_configuration_file")
        icon6 = QIcon(QIcon.fromTheme(u"document-open"))
        self.actionOpen_configuration_file.setIcon(icon6)
        self.actionOpen_configuration_file.setMenuRole(QAction.MenuRole.NoRole)
        self.actionSave_configuration_as = QAction(MainWindow)
        self.actionSave_configuration_as.setObjectName(u"actionSave_configuration_as")
        icon7 = QIcon(QIcon.fromTheme(u"document-save-as"))
        self.actionSave_configuration_as.setIcon(icon7)
        self.actionSave_configuration_as.setMenuRole(QAction.MenuRole.NoRole)
        self.actionOpen_configuration_file_menu = QAction(MainWindow)
        self.actionOpen_configuration_file_menu.setObjectName(u"actionOpen_configuration_file_menu")
        self.actionOpen_configuration_file_menu.setIcon(icon6)
        self.actionSave_configuration_as_menu = QAction(MainWindow)
        self.actionSave_configuration_as_menu.setObjectName(u"actionSave_configuration_as_menu")
        self.actionSave_configuration_as_menu.setIcon(icon7)
        self.actionAbout = QAction(MainWindow)
        self.actionAbout.setObjectName(u"actionAbout")
        icon8 = QIcon(QIcon.fromTheme(u"dialog-question"))
        self.actionAbout.setIcon(icon8)
        self.actionLicense = QAction(MainWindow)
        self.actionLicense.setObjectName(u"actionLicense")
        self.actionSave_configuration = QAction(MainWindow)
        self.actionSave_configuration.setObjectName(u"actionSave_configuration")
        icon9 = QIcon(QIcon.fromTheme(u"document-save"))
        self.actionSave_configuration.setIcon(icon9)
        self.actionSave_configuration.setMenuRole(QAction.MenuRole.NoRole)
        self.actionSave_configuration_menu = QAction(MainWindow)
        self.actionSave_configuration_menu.setObjectName(u"actionSave_configuration_menu")
        self.actionSave_configuration_menu.setIcon(icon9)
        self.actionSave_configuration_menu.setMenuRole(QAction.MenuRole.NoRole)
        self.actionConfigure_FTP_Cameras = QAction(MainWindow)
        self.actionConfigure_FTP_Cameras.setObjectName(u"actionConfigure_FTP_Cameras")
        icon10 = QIcon(QIcon.fromTheme(u"system-file-manager"))
        self.actionConfigure_FTP_Cameras.setIcon(icon10)
        self.actionConfigure_FTP_Cameras.setMenuRole(QAction.MenuRole.NoRole)
        self.actionConfigure_actuators = QAction(MainWindow)
        self.actionConfigure_actuators.setObjectName(u"actionConfigure_actuators")
        icon11 = QIcon()
        icon11.addFile(u"wadas/icons/icon-actuator-24.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.actionConfigure_actuators.setIcon(icon11)
        self.actionConfigure_actuators.setMenuRole(QAction.MenuRole.NoRole)
        self.actionConfigure_camera_to_actuator_associations = QAction(MainWindow)
        self.actionConfigure_camera_to_actuator_associations.setObjectName(u"actionConfigure_camera_to_actuator_associations")
        icon12 = QIcon(QIcon.fromTheme(u"insert-link"))
        self.actionConfigure_camera_to_actuator_associations.setIcon(icon12)
        self.actionConfigure_camera_to_actuator_associations.setMenuRole(QAction.MenuRole.NoRole)
        self.actionConfigure_WA = QAction(MainWindow)
        self.actionConfigure_WA.setObjectName(u"actionConfigure_WA")
        icon13 = QIcon()
        icon13.addFile(u"wadas/icons/icon-wa.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.actionConfigure_WA.setIcon(icon13)
        self.actionConfigure_WA.setMenuRole(QAction.MenuRole.NoRole)
        self.actionConfigure_Telegram = QAction(MainWindow)
        self.actionConfigure_Telegram.setObjectName(u"actionConfigure_Telegram")
        icon14 = QIcon()
        icon14.addFile(u"wadas/icons/telegram.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.actionConfigure_Telegram.setIcon(icon14)
        self.actionConfigure_Telegram.setMenuRole(QAction.MenuRole.NoRole)
        self.actionRecent_configuration = QAction(MainWindow)
        self.actionRecent_configuration.setObjectName(u"actionRecent_configuration")
        icon15 = QIcon(QIcon.fromTheme(QIcon.ThemeIcon.DocumentOpenRecent))
        self.actionRecent_configuration.setIcon(icon15)
        self.actionRecent_configuration.setMenuRole(QAction.MenuRole.NoRole)
        self.actionConfigure_database = QAction(MainWindow)
        self.actionConfigure_database.setObjectName(u"actionConfigure_database")
        icon16 = QIcon()
        icon16.addFile(u"wadas/icons/icon-db.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.actionConfigure_database.setIcon(icon16)
        self.actionConfigure_database.setMenuRole(QAction.MenuRole.NoRole)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.gridLayout = QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName(u"gridLayout")
        self.line = QFrame(self.centralwidget)
        self.line.setObjectName(u"line")
        sizePolicy1 = QSizePolicy(QSizePolicy.Policy.Fixed, QSizePolicy.Policy.MinimumExpanding)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.line.sizePolicy().hasHeightForWidth())
        self.line.setSizePolicy(sizePolicy1)
        self.line.setFrameShape(QFrame.Shape.VLine)
        self.line.setFrameShadow(QFrame.Shadow.Sunken)

        self.gridLayout.addWidget(self.line, 0, 1, 1, 1)

        self.label_image = QLabel(self.centralwidget)
        self.label_image.setObjectName(u"label_image")
        self.label_image.setEnabled(True)
        sizePolicy.setHeightForWidth(self.label_image.sizePolicy().hasHeightForWidth())
        self.label_image.setSizePolicy(sizePolicy)
        self.label_image.setMinimumSize(QSize(400, 300))
        self.label_image.setMaximumSize(QSize(800, 600))

        self.gridLayout.addWidget(self.label_image, 0, 0, 1, 1)

        self.plainTextEdit_log = QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_log.setObjectName(u"plainTextEdit_log")
        sizePolicy.setHeightForWidth(self.plainTextEdit_log.sizePolicy().hasHeightForWidth())
        self.plainTextEdit_log.setSizePolicy(sizePolicy)
        self.plainTextEdit_log.setMinimumSize(QSize(400, 100))

        self.gridLayout.addWidget(self.plainTextEdit_log, 1, 0, 1, 3)

        self.verticalLayout = QVBoxLayout()
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.label_op_mode_title = QLabel(self.centralwidget)
        self.label_op_mode_title.setObjectName(u"label_op_mode_title")
        sizePolicy2 = QSizePolicy(QSizePolicy.Policy.MinimumExpanding, QSizePolicy.Policy.Preferred)
        sizePolicy2.setHorizontalStretch(0)
        sizePolicy2.setVerticalStretch(0)
        sizePolicy2.setHeightForWidth(self.label_op_mode_title.sizePolicy().hasHeightForWidth())
        self.label_op_mode_title.setSizePolicy(sizePolicy2)
        font = QFont()
        font.setBold(True)
        self.label_op_mode_title.setFont(font)

        self.verticalLayout.addWidget(self.label_op_mode_title)

        self.label_op_mode = QLabel(self.centralwidget)
        self.label_op_mode.setObjectName(u"label_op_mode")
        sizePolicy2.setHeightForWidth(self.label_op_mode.sizePolicy().hasHeightForWidth())
        self.label_op_mode.setSizePolicy(sizePolicy2)

        self.verticalLayout.addWidget(self.label_op_mode)

        self.label_3 = QLabel(self.centralwidget)
        self.label_3.setObjectName(u"label_3")
        self.label_3.setFont(font)

        self.verticalLayout.addWidget(self.label_3)

        self.label_notification_method = QLabel(self.centralwidget)
        self.label_notification_method.setObjectName(u"label_notification_method")

        self.verticalLayout.addWidget(self.label_notification_method)

        self.label_4 = QLabel(self.centralwidget)
        self.label_4.setObjectName(u"label_4")
        self.label_4.setFont(font)

        self.verticalLayout.addWidget(self.label_4)

        self.label_database = QLabel(self.centralwidget)
        self.label_database.setObjectName(u"label_database")

        self.verticalLayout.addWidget(self.label_database)

        self.label = QLabel(self.centralwidget)
        self.label.setObjectName(u"label")
        sizePolicy2.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy2)
        self.label.setFont(font)

        self.verticalLayout.addWidget(self.label)

        self.listWidget_en_cameras = QListWidget(self.centralwidget)
        self.listWidget_en_cameras.setObjectName(u"listWidget_en_cameras")
        sizePolicy.setHeightForWidth(self.listWidget_en_cameras.sizePolicy().hasHeightForWidth())
        self.listWidget_en_cameras.setSizePolicy(sizePolicy)

        self.verticalLayout.addWidget(self.listWidget_en_cameras)

        self.label_2 = QLabel(self.centralwidget)
        self.label_2.setObjectName(u"label_2")
        sizePolicy2.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy2)
        self.label_2.setFont(font)

        self.verticalLayout.addWidget(self.label_2)

        self.listWidget_en_actuators = QListWidget(self.centralwidget)
        self.listWidget_en_actuators.setObjectName(u"listWidget_en_actuators")
        sizePolicy.setHeightForWidth(self.listWidget_en_actuators.sizePolicy().hasHeightForWidth())
        self.listWidget_en_actuators.setSizePolicy(sizePolicy)

        self.verticalLayout.addWidget(self.listWidget_en_actuators)

        self.line_2 = QFrame(self.centralwidget)
        self.line_2.setObjectName(u"line_2")
        self.line_2.setFrameShape(QFrame.Shape.HLine)
        self.line_2.setFrameShadow(QFrame.Shadow.Sunken)

        self.verticalLayout.addWidget(self.line_2)

        self.label_last_detection_title = QLabel(self.centralwidget)
        self.label_last_detection_title.setObjectName(u"label_last_detection_title")
        self.label_last_detection_title.setFont(font)

        self.verticalLayout.addWidget(self.label_last_detection_title)

        self.label_last_detection = QLabel(self.centralwidget)
        self.label_last_detection.setObjectName(u"label_last_detection")
        sizePolicy2.setHeightForWidth(self.label_last_detection.sizePolicy().hasHeightForWidth())
        self.label_last_detection.setSizePolicy(sizePolicy2)

        self.verticalLayout.addWidget(self.label_last_detection)

        self.label_last_classification_title = QLabel(self.centralwidget)
        self.label_last_classification_title.setObjectName(u"label_last_classification_title")
        self.label_last_classification_title.setFont(font)

        self.verticalLayout.addWidget(self.label_last_classification_title)

        self.label_last_classification = QLabel(self.centralwidget)
        self.label_last_classification.setObjectName(u"label_last_classification")
        sizePolicy2.setHeightForWidth(self.label_last_classification.sizePolicy().hasHeightForWidth())
        self.label_last_classification.setSizePolicy(sizePolicy2)

        self.verticalLayout.addWidget(self.label_last_classification)

        self.label_classified_animal_title = QLabel(self.centralwidget)
        self.label_classified_animal_title.setObjectName(u"label_classified_animal_title")
        self.label_classified_animal_title.setFont(font)

        self.verticalLayout.addWidget(self.label_classified_animal_title)

        self.label_classified_animal = QLabel(self.centralwidget)
        self.label_classified_animal.setObjectName(u"label_classified_animal")

        self.verticalLayout.addWidget(self.label_classified_animal)


        self.gridLayout.addLayout(self.verticalLayout, 0, 2, 1, 1)

        self.gridLayout.setRowStretch(0, 300)
        self.gridLayout.setColumnStretch(0, 300)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1150, 33))
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName(u"menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QToolBar(MainWindow)
        self.toolBar.setObjectName(u"toolBar")
        MainWindow.addToolBar(Qt.ToolBarArea.TopToolBarArea, self.toolBar)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menuFile.addAction(self.actionOpen_configuration_file_menu)
        self.menuFile.addAction(self.actionSave_configuration_as_menu)
        self.menuFile.addAction(self.actionSave_configuration_menu)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionRecent_configuration)
        self.menuHelp.addAction(self.actionAbout)
        self.menuHelp.addAction(self.actionLicense)
        self.toolBar.addAction(self.actionOpen_configuration_file)
        self.toolBar.addAction(self.actionSave_configuration_as)
        self.toolBar.addAction(self.actionSave_configuration)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionSelectLocalCameras)
        self.toolBar.addAction(self.actionConfigure_FTP_Cameras)
        self.toolBar.addAction(self.actionConfigure_actuators)
        self.toolBar.addAction(self.actionConfigure_camera_to_actuator_associations)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionActionConfigureEmail)
        self.toolBar.addAction(self.actionConfigure_WA)
        self.toolBar.addAction(self.actionConfigure_Telegram)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionSelect_Mode)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionConfigure_Ai_model)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionConfigure_database)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionRun)
        self.toolBar.addAction(self.actionStop)
        self.toolBar.addSeparator()

        self.retranslateUi(MainWindow)

        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"Wild Animals Detection and Alert System (WADAS) [*]", None))
        self.actionSelect_Mode.setText(QCoreApplication.translate("MainWindow", u"Select Mode", None))
#if QT_CONFIG(tooltip)
        self.actionSelect_Mode.setToolTip(QCoreApplication.translate("MainWindow", u"Select operating mode", None))
#endif // QT_CONFIG(tooltip)
        self.actionRun.setText(QCoreApplication.translate("MainWindow", u"Run", None))
#if QT_CONFIG(tooltip)
        self.actionRun.setToolTip(QCoreApplication.translate("MainWindow", u"Run detection", None))
#endif // QT_CONFIG(tooltip)
        self.actionStop.setText(QCoreApplication.translate("MainWindow", u"Stop ", None))
#if QT_CONFIG(tooltip)
        self.actionStop.setToolTip(QCoreApplication.translate("MainWindow", u"Stop detection", None))
#endif // QT_CONFIG(tooltip)
        self.actionActionConfigureEmail.setText(QCoreApplication.translate("MainWindow", u"ActionConfigureEmail", None))
#if QT_CONFIG(tooltip)
        self.actionActionConfigureEmail.setToolTip(QCoreApplication.translate("MainWindow", u"Configure Email notifications", None))
#endif // QT_CONFIG(tooltip)
        self.actionSelectLocalCameras.setText(QCoreApplication.translate("MainWindow", u"selectLocalCameras", None))
#if QT_CONFIG(tooltip)
        self.actionSelectLocalCameras.setToolTip(QCoreApplication.translate("MainWindow", u"Configure camera(s)", None))
#endif // QT_CONFIG(tooltip)
        self.actionConfigure_Ai_model.setText(QCoreApplication.translate("MainWindow", u"Configure Ai model", None))
        self.actionOpen_configuration_file.setText(QCoreApplication.translate("MainWindow", u"Open configuration file", None))
        self.actionSave_configuration_as.setText(QCoreApplication.translate("MainWindow", u"Save configuration as", None))
#if QT_CONFIG(tooltip)
        self.actionSave_configuration_as.setToolTip(QCoreApplication.translate("MainWindow", u"Save configuration as ...", None))
#endif // QT_CONFIG(tooltip)
        self.actionOpen_configuration_file_menu.setText(QCoreApplication.translate("MainWindow", u"Open configuration file", None))
        self.actionSave_configuration_as_menu.setText(QCoreApplication.translate("MainWindow", u"Save configuration as ...", None))
#if QT_CONFIG(tooltip)
        self.actionSave_configuration_as_menu.setToolTip(QCoreApplication.translate("MainWindow", u"Save configuration as ...", None))
#endif // QT_CONFIG(tooltip)
        self.actionAbout.setText(QCoreApplication.translate("MainWindow", u"About", None))
        self.actionLicense.setText(QCoreApplication.translate("MainWindow", u"License", None))
        self.actionSave_configuration.setText(QCoreApplication.translate("MainWindow", u"Save configuration", None))
#if QT_CONFIG(tooltip)
        self.actionSave_configuration.setToolTip(QCoreApplication.translate("MainWindow", u"Save configuration", None))
#endif // QT_CONFIG(tooltip)
        self.actionSave_configuration_menu.setText(QCoreApplication.translate("MainWindow", u"Save configuration", None))
#if QT_CONFIG(tooltip)
        self.actionSave_configuration_menu.setToolTip(QCoreApplication.translate("MainWindow", u"Save configuration", None))
#endif // QT_CONFIG(tooltip)
        self.actionConfigure_FTP_Cameras.setText(QCoreApplication.translate("MainWindow", u"Configure FTP Cameras", None))
#if QT_CONFIG(tooltip)
        self.actionConfigure_FTP_Cameras.setToolTip(QCoreApplication.translate("MainWindow", u"Configure FTP cameras and server", None))
#endif // QT_CONFIG(tooltip)
        self.actionConfigure_actuators.setText(QCoreApplication.translate("MainWindow", u"Configure Actuators", None))
#if QT_CONFIG(tooltip)
        self.actionConfigure_actuators.setToolTip(QCoreApplication.translate("MainWindow", u"Configure actuators", None))
#endif // QT_CONFIG(tooltip)
        self.actionConfigure_camera_to_actuator_associations.setText(QCoreApplication.translate("MainWindow", u"Configire Camera to Actuator associations", None))
#if QT_CONFIG(tooltip)
        self.actionConfigure_camera_to_actuator_associations.setToolTip(QCoreApplication.translate("MainWindow", u"Configure camera to actuator association(s)", None))
#endif // QT_CONFIG(tooltip)
        self.actionConfigure_WA.setText(QCoreApplication.translate("MainWindow", u"Configure WhatsApp", None))
#if QT_CONFIG(tooltip)
        self.actionConfigure_WA.setToolTip(QCoreApplication.translate("MainWindow", u"Configure WhatsApp notifications", None))
#endif // QT_CONFIG(tooltip)
        self.actionConfigure_Telegram.setText(QCoreApplication.translate("MainWindow", u"Configure Telegram", None))
#if QT_CONFIG(tooltip)
        self.actionConfigure_Telegram.setToolTip(QCoreApplication.translate("MainWindow", u"Configure Telegram notifications", None))
#endif // QT_CONFIG(tooltip)
        self.actionRecent_configuration.setText(QCoreApplication.translate("MainWindow", u"No recent configuration", None))
#if QT_CONFIG(tooltip)
        self.actionRecent_configuration.setToolTip(QCoreApplication.translate("MainWindow", u"Load last saved configuration", None))
#endif // QT_CONFIG(tooltip)
        self.actionConfigure_database.setText(QCoreApplication.translate("MainWindow", u"configure database", None))
#if QT_CONFIG(tooltip)
        self.actionConfigure_database.setToolTip(QCoreApplication.translate("MainWindow", u"Configure database", None))
#endif // QT_CONFIG(tooltip)
        self.label_image.setText(QCoreApplication.translate("MainWindow", u"Detecion viewer", None))
        self.label_op_mode_title.setText(QCoreApplication.translate("MainWindow", u"Operation mode:", None))
        self.label_op_mode.setText("")
        self.label_3.setText(QCoreApplication.translate("MainWindow", u"Notification method:", None))
        self.label_notification_method.setText("")
        self.label_4.setText(QCoreApplication.translate("MainWindow", u"Database:", None))
        self.label_database.setText("")
        self.label.setText(QCoreApplication.translate("MainWindow", u"Enabled Camera(s):", None))
        self.label_2.setText(QCoreApplication.translate("MainWindow", u"Enabled Actuator(s)", None))
        self.label_last_detection_title.setText(QCoreApplication.translate("MainWindow", u"Last detection:", None))
        self.label_last_detection.setText("")
        self.label_last_classification_title.setText(QCoreApplication.translate("MainWindow", u"Last classification:", None))
        self.label_last_classification.setText("")
        self.label_classified_animal_title.setText(QCoreApplication.translate("MainWindow", u"Classified animal(s):", None))
        self.label_classified_animal.setText("")
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"File", None))
        self.menuHelp.setTitle(QCoreApplication.translate("MainWindow", u"Help", None))
        self.toolBar.setWindowTitle(QCoreApplication.translate("MainWindow", u"toolBar", None))
    # retranslateUi

